name: Weekly Dependency Updates

on:
  schedule:
    # Run every Monday at 9:00 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    # Allow manual trigger

env:
  NODE_VERSION: '20'
  BRANCH_NAME: 'chore/weekly-dependency-updates'

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Backup current package.json
        run: |
          cp package.json package.json.backup
          
      - name: Update all dependencies to latest versions
        run: |
          # Update all dependencies (both production and development)
          # Capture the output for the diff
          npx npm-check-updates -u | tee ncu-output.txt
          
          # Install updated dependencies
          npm install
          
      - name: Generate dependency diff
        id: dep-diff
        run: |
          # Create a temporary file for the diff output
          cat > /tmp/dep-diff.md << 'DIFF_EOF'
          ## Dependency Updates
          
          DIFF_EOF
          
          # Check if backup exists
          if [ -f package.json.backup ]; then
            # Compare production dependencies
            BEFORE=$(jq -r '.dependencies // {} | to_entries | .[] | "\(.key): \(.value)"' package.json.backup | sort)
            AFTER=$(jq -r '.dependencies // {} | to_entries | .[] | "\(.key): \(.value)"' package.json | sort)
            
            echo "Debug: Production deps comparison"
            echo "BEFORE: $BEFORE"
            echo "AFTER: $AFTER"
            
            if [ -n "$BEFORE" ] || [ -n "$AFTER" ]; then
              echo "### Production Dependencies" >> /tmp/dep-diff.md
              echo '```diff' >> /tmp/dep-diff.md
              if [ -n "$BEFORE" ] && [ -n "$AFTER" ]; then
                # Create temporary files for diff
                echo "$BEFORE" > /tmp/before-prod.txt
                echo "$AFTER" > /tmp/after-prod.txt
                echo "Debug: Running diff for production dependencies"
                diff -u /tmp/before-prod.txt /tmp/after-prod.txt | tail -n +3 >> /tmp/dep-diff.md || echo "No production dependency changes" >> /tmp/dep-diff.md
              elif [ -n "$AFTER" ]; then
                echo "$AFTER" | sed 's/^/+ /' >> /tmp/dep-diff.md
              fi
              echo '```' >> /tmp/dep-diff.md
              echo "" >> /tmp/dep-diff.md
            fi
            
            # Compare development dependencies  
            BEFORE_DEV=$(jq -r '.devDependencies // {} | to_entries | .[] | "\(.key): \(.value)"' package.json.backup | sort)
            AFTER_DEV=$(jq -r '.devDependencies // {} | to_entries | .[] | "\(.key): \(.value)"' package.json | sort)
            
            echo "Debug: Development deps comparison"
            echo "BEFORE_DEV: $BEFORE_DEV"
            echo "AFTER_DEV: $AFTER_DEV"
            
            if [ -n "$BEFORE_DEV" ] || [ -n "$AFTER_DEV" ]; then
              echo "### Development Dependencies" >> /tmp/dep-diff.md
              echo '```diff' >> /tmp/dep-diff.md
              if [ -n "$BEFORE_DEV" ] && [ -n "$AFTER_DEV" ]; then
                # Create temporary files for diff
                echo "$BEFORE_DEV" > /tmp/before-dev.txt
                echo "$AFTER_DEV" > /tmp/after-dev.txt
                echo "Debug: Running diff for development dependencies"
                diff -u /tmp/before-dev.txt /tmp/after-dev.txt | tail -n +3 >> /tmp/dep-diff.md || echo "No development dependency changes" >> /tmp/dep-diff.md
              elif [ -n "$AFTER_DEV" ]; then
                echo "$AFTER_DEV" | sed 's/^/+ /' >> /tmp/dep-diff.md
              fi
              echo '```' >> /tmp/dep-diff.md
              echo "" >> /tmp/dep-diff.md
            fi
            
            # Show npm-check-updates summary if available
            if [ -f ncu-output.txt ]; then
              echo "### Update Summary" >> /tmp/dep-diff.md
              echo '```' >> /tmp/dep-diff.md
              cat ncu-output.txt >> /tmp/dep-diff.md
              echo '```' >> /tmp/dep-diff.md
            fi
          else
            echo "### Unable to generate dependency diff" >> /tmp/dep-diff.md
            echo "Package.json backup not found." >> /tmp/dep-diff.md
          fi
          
          # Debug: Show what we generated
          echo "Debug: Generated diff content:"
          cat /tmp/dep-diff.md
          
          # Set the environment variable using the temporary file
          echo "DEPENDENCY_DIFF<<EOF" >> $GITHUB_ENV
          cat /tmp/dep-diff.md >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
      - name: Run linting
        run: npm run lint
        continue-on-error: true
        
      - name: Run tests
        run: npm test
        continue-on-error: true
        
      - name: Build project
        run: npm run build
        continue-on-error: true
        
      - name: Create branch for updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Create or checkout branch without resetting changes
          git checkout -b ${{ env.BRANCH_NAME }} || git checkout ${{ env.BRANCH_NAME }}
          
      - name: Check for changes
        id: check-changes
        run: |
          # Add files that might have changed
          git add package.json package-lock.json
          
          if git diff --cached --quiet; then
            echo "No changes detected in package files"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in package files"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            
            # Show what changed for debugging
            echo "Changes detected:"
            git diff --cached --name-only
          fi
          
      - name: Commit changes
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          # Files are already staged from the check-changes step
          git commit -m "chore: update dependencies to latest versions

          Updates include:
          - Production and development dependencies updated to latest versions
          - Package-lock.json regenerated
          
          Generated by GitHub Actions workflow"
          
      - name: Push branch
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          git push -f origin ${{ env.BRANCH_NAME }}
          
      - name: Create Pull Request
        if: steps.check-changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.BRANCH_NAME }}
          base: main
          title: 'chore: weekly dependency updates'
          body: |
            ## ðŸ“¦ Weekly Dependency Updates
            
            This PR contains automated dependency updates for the week.
            
            ### ðŸ”„ Changes Made
            ${{ env.DEPENDENCY_DIFF }}
            
            ### âœ… Checks Performed
            - [x] Updated all dependencies to latest versions
            - [x] Ran linting (`npm run lint`)
            - [x] Executed tests (`npm test`)
            - [x] Verified build process (`npm run build`)
            
            ### ðŸ“‹ Next Steps
            1. Review the changes above
            2. Check if any breaking changes are introduced
            3. Test the application manually if needed
            4. Merge when ready
            
            ### ðŸš¨ Important Notes
            - This PR was automatically generated by GitHub Actions
            - Please review the dependency changes carefully
            - Some updates might require manual intervention
            
            ---
            *Created by [GitHub Actions workflow](.github/workflows/dependency-updates.yml)*
          labels: |
            dependencies
            automated
            chore
          draft: false
          
      - name: Comment on existing PR
        if: steps.check-changes.outputs.has_changes == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${process.env.BRANCH_NAME}`
            });
            
            if (pulls.length > 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pulls[0].number,
                body: 'âœ… Dependencies are already up to date. No changes needed this week.'
              });
            }