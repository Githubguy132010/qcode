name: Weekly Dependency Updates

on:
  schedule:
    # Run every Monday at 9:00 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    # Allow manual trigger

env:
  NODE_VERSION: '20'
  BRANCH_NAME: 'chore/weekly-dependency-updates'

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Get current dependency versions
        id: current-deps
        run: |
          echo "CURRENT_DEPS<<EOF" >> $GITHUB_ENV
          npm list --depth=0 --json >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
      - name: Update all dependencies to latest versions
        run: |
          # Update dependencies
          npx npm-check-updates -u
          
          # Update devDependencies
          npx npm-check-updates -u --dev
          
          # Install updated dependencies
          npm install
          
      - name: Get updated dependency versions
        id: updated-deps
        run: |
          echo "UPDATED_DEPS<<EOF" >> $GITHUB_ENV
          npm list --depth=0 --json >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
      - name: Generate dependency diff
        id: dep-diff
        run: |
          echo "DEPENDENCY_DIFF<<EOF" >> $GITHUB_ENV
          echo "## Dependency Updates" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          
          # Get package.json before and after
          BEFORE=$(echo '${{ env.CURRENT_DEPS }}' | jq -r '.dependencies // {} | to_entries | .[] | "\(.key): \(.value)"' | sort)
          AFTER=$(echo '${{ env.UPDATED_DEPS }}' | jq -r '.dependencies // {} | to_entries | .[] | "\(.key): \(.value)"' | sort)
          
          if [ -n "$BEFORE" ] && [ -n "$AFTER" ]; then
            echo "### Production Dependencies" >> $GITHUB_ENV
            echo '```diff' >> $GITHUB_ENV
            diff <(echo "$BEFORE") <(echo "$AFTER") || true >> $GITHUB_ENV
            echo '```' >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
          fi
          
          BEFORE_DEV=$(echo '${{ env.CURRENT_DEPS }}' | jq -r '.devDependencies // {} | to_entries | .[] | "\(.key): \(.value)"' | sort)
          AFTER_DEV=$(echo '${{ env.UPDATED_DEPS }}' | jq -r '.devDependencies // {} | to_entries | .[] | "\(.key): \(.value)"' | sort)
          
          if [ -n "$BEFORE_DEV" ] && [ -n "$AFTER_DEV" ]; then
            echo "### Development Dependencies" >> $GITHUB_ENV
            echo '```diff' >> $GITHUB_ENV
            diff <(echo "$BEFORE_DEV") <(echo "$AFTER_DEV") || true >> $GITHUB_ENV
            echo '```' >> $GITHUB_ENV
          fi
          
          echo "EOF" >> $GITHUB_ENV
          
      - name: Run linting
        run: npm run lint
        continue-on-error: true
        
      - name: Run tests
        run: npm test
        continue-on-error: true
        
      - name: Build project
        run: npm run build
        continue-on-error: true
        
      - name: Create branch for updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Create or checkout branch
          git checkout -b ${{ env.BRANCH_NAME }} || git checkout ${{ env.BRANCH_NAME }}
          git reset --hard origin/main || true
          
      - name: Check for changes
        id: check-changes
        run: |
          if git diff --quiet package.json package-lock.json; then
            echo "No changes detected"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Commit changes
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          git add package.json package-lock.json
          git commit -m "chore: update dependencies to latest versions"
          
      - name: Push branch
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          git push -f origin ${{ env.BRANCH_NAME }}
          
      - name: Create Pull Request
        if: steps.check-changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.BRANCH_NAME }}
          base: main
          title: 'chore: weekly dependency updates'
          body: |
            ## ðŸ“¦ Weekly Dependency Updates
            
            This PR contains automated dependency updates for the week.
            
            ### ðŸ”„ Changes Made
            ${{ env.DEPENDENCY_DIFF }}
            
            ### âœ… Checks Performed
            - [x] Updated all dependencies to latest versions
            - [x] Ran linting (`npm run lint`)
            - [x] Executed tests (`npm test`)
            - [x] Verified build process (`npm run build`)
            
            ### ðŸ“‹ Next Steps
            1. Review the changes above
            2. Check if any breaking changes are introduced
            3. Test the application manually if needed
            4. Merge when ready
            
            ### ðŸš¨ Important Notes
            - This PR was automatically generated by GitHub Actions
            - Please review the dependency changes carefully
            - Some updates might require manual intervention
            
            ---
            *Created by [GitHub Actions workflow](.github/workflows/dependency-updates.yml)*
          labels: |
            dependencies
            automated
            chore
          draft: false
          
      - name: Comment on existing PR
        if: steps.check-changes.outputs.has_changes == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${process.env.BRANCH_NAME}`
            });
            
            if (pulls.length > 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pulls[0].number,
                body: 'âœ… Dependencies are already up to date. No changes needed this week.'
              });
            }